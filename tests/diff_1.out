[file=grappa/operators/__init__.py]
    ('only',        'ContainOnlyOperator'),
[file=grappa/operators/contain.py]
        'a value of type "{type}" with content "{value}"',
[file=grappa/operators/equal.py]
        'a value of type "{type}" with data "{value}"',
[file=grappa/operators/only.py]
import six
from grappa.log import log
from .contain import ContainOperator
from ..operator import Operator


class ContainOnlyOperator(ContainOperator):
    """
    Asserts if only the given value or values can be found
    in a another object.

    Example::

        # Should style
        ['foo', 'bar'] | should.contain.only('foo', 'bar')
        [{'foo': True}, 'bar'] | should.contain.only({'foo': True}, 'bar')

        # Should style - negation form
        ['foo', 'bar'] | should.do_not.contain.only('baz')
        ('foo', 'bar') | should.do_not.contain.only('foo', 'bar', 'extra')

        # Expect style
        ['foo', 'bar'] | expect.to.contain.only('foo', 'bar')
        [{'foo': True}, 'bar'] | expect.to.contain.only('bar', {'foo': True})

        # Expect style - negation form
        ['foo', 'bar'] | expect.to_not.contain.only('bar')
        ['foo', 'bar'] | expect.to_not.contain.only('baz', 'foo')
        ['foo', 'bar'] | expect.to_not.contain.only('bar', 'foo', 'extra')
    """
    operators = ('only', 'just',)
    expected_message = Operator.Dsl.Message(
        'a value that contains only "{value}"',
        'a value that does not contain only "{value}"',
    )

    def match(self, subject, *expected):
        contains_all, reasons = super(ContainOnlyOperator, self)\
            .match(subject, *expected)
        # Add check that no other item is in expected
        if contains_all is True:
            # Handle string case
            if isinstance(subject, six.string_types):
                log.warn('String comparison using "only" is not advised')
                return (subject == expected[0]), []
            return super(ContainOnlyOperator, self).match(expected, *subject)
        return contains_all, reasons
[file=grappa/operators/present.py]
                'An present object is the opposite of an empty object.'
[file=grappa/reporters/subject.py]
                value
[file=requirements-dev.txt]
mock~=2.0.0
[file=tests/operators/only_test.py]
# coding: utf-8
import pytest
try:
    from unittest import mock
except ImportError:
    import mock


def test_should_contain_only(should):
    [1, 2] | should.contain.only(1, 2)
    # dicts/list + different order in expected values
    [{'foo': 'bar'}, 2] | should.contain.only(2, {'foo': 'bar'})
    ('foo', 'bar', 123) | should.contain.only('bar', 123, 'foo')
    'hello' | should.contain.only('hello')  # string case
    # chainability
    ([], 'ab', 42) | should.contain.only(42, 'ab', []) | should.have.length(3)

    with pytest.raises(AssertionError):
        ['a', '∆˚'] | should.contain.only('a')  # missing items

    with pytest.raises(AssertionError):
        'abc' | should.contain.only('def')  # string case unequal

    with pytest.raises(AssertionError):
        [321, '∆˚'] | should.contain.only('∆˚', 'b')  # different item

    with pytest.raises(AssertionError):
        # too many items
        [
            {'foo': 'bar'},
            {'meaning': 42}
        ] | should.contain.only([], {'foo': 'bar'}, {'meaning': 42})


def test_should_contain_only_string_case(should):
    """Should log a warning when using the only operator for strings."""
    with mock.patch('grappa.operators.only.log') as log:
        'lala' | should.contain.only('lala')
        log.warn.assert_called_once_with(
            'String comparison using "only" is not advised'
        )
